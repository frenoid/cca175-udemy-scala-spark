spark-shell --master yarn \
--num-executors 1 \
--executor-memory 1G \
--conf spark.ui.port=12543

val orders = sc.textFile("/user/root/retail_db/orders")

// Explore possible states of order
orders.map(o => o.split(",")(3)).distinct

// Take only CLOSED and COMPELTE orders
val completeAndClosedOrders = orders.
	filter(o => o.split(",")(3) == "CLOSED" || o.split(",")(3) == "COMPLETE")

val completeAndClosedOrdersPairs = completeAndClosedOrders.
	map(o => {(o.split(",")(0).toInt, o.split(",")(1).substring(0,10))})

completeAndClosedOrdersPairs.count // 30455

// Read order_items
val orderItems = sc.textFile("/user/root/retail_db/order_items")


// Create  (orderId, (productId, orderRevenue))
val orderItemsPairs = orderItems.map(oi => {
	(oi.split(",")(1).toInt,
	(oi.split(",")(2).toInt,oi.split(",")(4).toFloat))
})

orderItemsPairs.count  // 172198

val completedOrderItemsWithDates = completeAndClosedOrdersPairs.join(orderItemsPairs)

// Create input ((productId,date), productSubtotal)
// notice the compositie key
// Output ((productId, date). daily_revenue_per_product_id)
val completeOrderItemsSortedPairs = completedOrderItemsWithDates.map(oi => {
	((oi._2._2._1, oi._2._1), oi._2._2._2)
})

completeOrderItemsSortedPairs.count // 75408

// This iterates over the values and sums the values up
val dailyRevenuePerProductId = completeOrderItemsSortedPairs.
	reduceByKey((revenue, orderItemSubtotal) => revenue + orderItemSubtotal)

dailyRevenuePerProductId.count // 9120

// Create (productId, (date, revenue))
val productIdDateRevenue = dailyRevenuePerProductId.map(rec => (rec._1._1, (rec._1._2, rec._2)))

val products = sc.textFile("/user/root/retail_db/products")

val productsPairs = products.map(p => {
	(p.split(",")(0).toInt, p.split(",")(2))
})

productsPairs.count // 1345

val completeOrderItemsWithNames = productIdDateRevenue.leftOuterJoin(productsPairs).map(p => (p._2._1._1, p._2._1._2, p._2._2.get))

completeOrderItemsWithNames.count // 75408

val sortedOrderWithNames = completeOrderItemsWithNames.sortBy(o => o._2, false).sortBy(o => o._1, true)

sortedOrderWithNames.map(rec => rec._1+","+rec._2+","+rec._3).saveAsTextFile("/user/root/daily_revenue_txt_scala")


sc.textFile("/user/root/daily_revenue_txt_scala").collect.foreach(println)